
# main-overview

## Development Guidelines

- Only modify code directly relevant to the specific request. Avoid changing unrelated functionality.
- Never replace code with placeholders like `# ... rest of the processing ...`. Always include complete code.
- Break problems into smaller steps. Think through each step separately before implementing.
- Always provide a complete PLAN with REASONING based on evidence from code and logs before making changes.
- Explain your OBSERVATIONS clearly, then provide REASONING to identify the exact issue. Add console logs when needed to gather more information.


imgcolorshine transforms image colors using OKLCH color attractors through a physics-inspired model operating in perceptually uniform color space.

## Core Business Components

### Color Attraction Engine
- Implements gravitational-inspired color transformation model
- OKLCH color space operations for perceptual uniformity
- Attractor system with tolerance and strength parameters
- Located in: `src/imgcolorshine/color_engine.py`

### Color Transformation Pipeline
- Multi-attractor blending with normalized weighted averaging
- Independent channel control (luminance, saturation, hue)
- CSS Color Module 4 compliant gamut mapping
- Located in: `src/imgcolorshine/transforms.py`

### Falloff System
- Raised cosine curve for smooth color transitions
- Controls attractor influence based on color distance
- Located in: `src/imgcolorshine/falloff.py`

### Gamut Management
- CSS Color Module 4 compliant gamut mapping
- Preserves lightness and hue while adjusting chroma
- Located in: `src/imgcolorshine/gamut.py`

## Domain-Specific Features

### Color Space Management
- OKLCH/Oklab color space transformations
- Universal CSS color format support
- Perceptually uniform color operations

### Attractor Model
- Color transformation via attraction points
- Configurable tolerance and strength parameters
- Multiple attractor blending capabilities

### Channel Control
- Independent transformation of color components
- Selective channel processing
- Preserved channel isolation

## Business Logic Organization

### Core Processing Pipeline
1. Color space conversion to OKLCH
2. Attractor influence calculation
3. Channel-specific transformations
4. Gamut mapping and correction
5. Output conversion

### Component Integration
- Color Engine ↔ Transformation Pipeline
- Falloff System ↔ Attractor Model
- Gamut Management ↔ Output Processing

# imgcolorshine

Transform image colors using OKLCH color attractors - a physics-inspired tool that operates in perceptually uniform color space.

## Overview

`imgcolorshine` applies a gravitational-inspired color transformation where specified "attractor" colors pull the image's colors toward them. The tool works in the OKLCH color space, ensuring perceptually uniform and natural-looking results.

## Features

- **Perceptually Uniform**: Operations in OKLCH color space for intuitive results
- **Flexible Color Input**: Supports all CSS color formats (hex, rgb, hsl, oklch, named colors)
- **Selective Channel Control**: Transform lightness, saturation, and/or hue independently
- **Multiple Attractors**: Blend influences from multiple color targets
- **High Performance**: Optimized with NumPy and Numba for fast processing
- **Memory Efficient**: Automatic tiling for large images
- **Professional Quality**: CSS Color Module 4 compliant gamut mapping

## Installation

```bash
# Using uv (recommended)
uv run imgcolorshine.py --help

# Or install dependencies manually
pip install coloraide opencv-python numpy numba click pillow loguru rich
```

## Usage

### Basic Example

Transform an image to be more red:

```bash
./imgcolorshine.py photo.jpg "red;50;75"
```

### Command Syntax

```bash
imgcolorshine INPUT_IMAGE ATTRACTOR1 [ATTRACTOR2 ...] [OPTIONS]
```

Each attractor has the format: `"color;tolerance;strength"`

- **color**: Any CSS color (e.g., "red", "#ff0000", "oklch(70% 0.2 120)")
- **tolerance**: 0-100 (radius of influence - how far the color reaches)
- **strength**: 0-100 (transformation intensity - how much colors are pulled)

### Options

- `--output-image PATH`: Output image file (auto-generated if not specified)
- `--luminance/--no-luminance`: Enable/disable lightness transformation (default: True)
- `--saturation/--no-saturation`: Enable/disable chroma transformation (default: True)
- `--hue/--no-hue`: Enable/disable hue transformation (default: True)
- `--verbose`: Enable verbose logging (default: False)
- `--tile-size INT`: Tile size for large images (default: 1024)

### Examples

**Warm sunset effect:**
```bash
./imgcolorshine.py landscape.png \
  "oklch(80% 0.2 60);40;60" \
  "#ff6b35;30;80" \
  --output-image sunset.png
```

**Shift only hues toward green:**
```bash
./imgcolorshine.py portrait.jpg "green;60;90" \
  --no-luminance --no-saturation
```

**Multiple color influences:**
```bash
./imgcolorshine.py photo.jpg \
  "oklch(70% 0.15 120);50;70" \
  "hsl(220 100% 50%);25;50" \
  "#ff00ff;30;40"
```


## How It Works

1. **Color Space**: All operations happen in OKLCH space for perceptual uniformity
2. **Attraction Model**: Each attractor color exerts influence based on:
   - **Distance**: How similar a pixel's color is to the attractor
   - **Tolerance**: Maximum distance at which influence occurs
   - **Strength**: Maximum transformation amount
3. **Falloff**: Smooth raised-cosine curve for natural transitions
4. **Blending**: Multiple attractors blend using normalized weighted averaging
5. **Gamut Mapping**: Out-of-bounds colors are mapped back to displayable range

## Understanding Parameters

### Tolerance (0-100)
- **Low values (0-20)**: Only very similar colors are affected
- **Medium values (30-60)**: Moderate range of colors transformed
- **High values (70-100)**: Wide range of colors influenced

### Strength (0-100)
- **Low values (0-30)**: Subtle color shifts
- **Medium values (40-70)**: Noticeable but natural transformations
- **High values (80-100)**: Strong color replacement

## Performance

- Processes a 1920×1080 image in ~2-5 seconds
- Automatic tiling for images larger than 2GB memory usage
- GPU acceleration available with CuPy (10-100x speedup)

## Technical Details

- **Color Engine**: ColorAide for accurate OKLCH operations
- **Image I/O**: OpenCV (4x faster than PIL for PNG)
- **Computation**: NumPy + Numba JIT compilation
- **Gamut Mapping**: CSS Color Module 4 algorithm
- **Falloff Function**: Raised cosine for smooth transitions

## Development

This project follows a structured approach focusing on code quality, documentation, and maintainable development practices.


$END$

